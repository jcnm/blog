[{"content":"Maintenant que nous avons exploré les raisons d\u0026rsquo;utiliser un outil comme Hugo, passons à l\u0026rsquo;étape cruciale : son installation. Hugo est réputé pour sa simplicité d\u0026rsquo;installation. Il est distribué sous forme d\u0026rsquo;un unique fichier binaire exécutable, ce qui signifie qu\u0026rsquo;il n\u0026rsquo;y a généralement pas de dépendances complexes à gérer si vous utilisez les versions précompilées. Nous allons couvrir les méthodes d\u0026rsquo;installation les plus courantes pour MacOS, Windows et Linux, afin que vous puissiez démarrer rapidement, quel que soit votre environnement de travail.\nNous nous baserons sur les dernières versions stables de Hugo. Vous pouvez toujours vérifier la dernière version disponible sur la page Releases de Hugo sur GitHub.\nPrérequis Généraux d\u0026rsquo;Installation de Hugo Pour la plupart des utilisateurs, télécharger le binaire précompilé pour votre système d\u0026rsquo;exploitation est la méthode la plus simple et ne nécessite aucune dépendance supplémentaire. Cependant, si vous envisagez de compiler Hugo depuis les sources ou si vous utilisez des fonctionnalités avancées qui pourraient en dépendre (ce qui est rare pour une utilisation standard), vous aurez besoin d\u0026rsquo;installer le langage de programmation Go. Nous mentionnerons cette option, mais pour débuter, les binaires suffisent amplement.\nInstallation sur MacOS Sur MacOS, vous avez principalement deux options : utiliser le gestionnaire de paquets Homebrew ou télécharger le binaire manuellement.\nOption 1 : Via Homebrew (Recommandé) Homebrew est un gestionnaire de paquets populaire pour MacOS qui simplifie l\u0026rsquo;installation et la mise à jour de logiciels.\nInstaller Homebrew (si vous ne l\u0026rsquo;avez pas déjà) : Ouvrez votre Terminal (Applications \u0026gt; Utilitaires \u0026gt; Terminal) et collez la commande suivante :\n1 /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Suivez les instructions à l\u0026rsquo;écran.\nInstaller Hugo : Une fois Homebrew installé, tapez la commande suivante dans votre Terminal :\n1 brew install hugo Homebrew téléchargera et installera la dernière version stable de Hugo.\nNOTE: Il bon de mettre à jour brew apres l\u0026rsquo;installation et régulièrement si c\u0026rsquo;est votre machine personnel avec brew upgrade.\nMettre à jour Hugo (plus tard) :\n1 brew upgrade hugo Option 2 : Installation Manuelle du Binaire Rendez-vous sur la page Releases de Hugo sur GitHub. Téléchargez l\u0026rsquo;archive hugo_extended_X.Y.Z_darwin-universal.tar.gz (où X.Y.Z est le numéro de version). La version \u0026ldquo;extended\u0026rdquo; est recommandée car elle supporte des fonctionnalités comme le traitement des fichiers SASS/SCSS. Extrayez l\u0026rsquo;archive. Vous obtiendrez un fichier binaire nommé hugo. 1 2 # tar -zxvf hugo_extended_X.Y.Z_macOS-universal.tar.gz tar -zxvf hugo_extended_0.147.3_darwin-universal.tar.gz ?NOTE: Si ce n\u0026rsquo;est pas darwin qui est listé propablement macOS ou silicon le sera pour les architectures MacOS.\nDéplacez ce fichier binaire dans un répertoire inclus dans votre PATH système, par exemple /usr/local/bin : 1 sudo mv hugo /usr/local/bin/ Vous pourriez avoir besoin de créer le répertoire /usr/local/bin s\u0026rsquo;il n\u0026rsquo;existe pas, ou choisir un autre répertoire de votre PATH (comme ~/bin si configuré). Installation sur Windows Sur Windows, vous pouvez utiliser des gestionnaires de paquets comme Chocolatey ou Scoop, ou installer le binaire manuellement.\nOption 1 : Via Chocolatey (Recommandé) Chocolatey est un gestionnaire de paquets pour Windows.\nInstaller Chocolatey (si vous ne l\u0026rsquo;avez pas déjà) : Suivez les instructions sur le site officiel de Chocolatey. Généralement, cela implique d\u0026rsquo;ouvrir PowerShell en tant qu\u0026rsquo;administrateur et d\u0026rsquo;exécuter une commande.\nInstaller Hugo : Ouvrez PowerShell en tant qu\u0026rsquo;administrateur et tapez :\n1 choco install hugo-extended -y Nous installons hugo-extended pour bénéficier de toutes les fonctionnalités.\nMettre à jour Hugo (plus tard) :\n1 choco upgrade hugo-extended -y Option 2 : Via Scoop Scoop est une autre excellente alternative pour gérer les paquets en ligne de commande sur Windows.\nInstaller Scoop (si vous ne l\u0026rsquo;avez pas déjà) : Ouvrez PowerShell et exécutez : 1 2 Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Nécessaire si pas déjà fait irm get.scoop.sh | iex Installer Hugo : 1 scoop install hugo-extended Mettre à jour Hugo (plus tard) : 1 scoop update hugo-extended Option 3 : Installation Manuelle du Binaire Allez sur la page Releases de Hugo sur GitHub. Téléchargez l\u0026rsquo;archive de la forme hugo_extended_X.Y.Z_windows-amd64.zip: hugo_extended_0.147.3_windows-amd64.zip par exemple. Extrayez l\u0026rsquo;archive. Vous trouverez un fichier hugo.exe. Créez un dossier (par exemple C:\\Hugo\\bin) et copiez hugo.exe à l\u0026rsquo;intérieur. Ajoutez ce dossier à votre variable d\u0026rsquo;environnement PATH : Recherchez \u0026ldquo;variables d\u0026rsquo;environnement\u0026rdquo; dans le menu Démarrer et sélectionnez \u0026ldquo;Modifier les variables d\u0026rsquo;environnement système\u0026rdquo;. Cliquez sur \u0026ldquo;Variables d\u0026rsquo;environnement\u0026hellip;\u0026rdquo;. Dans la section \u0026ldquo;Variables système\u0026rdquo;, trouvez la variable Path et sélectionnez-la. Cliquez sur \u0026ldquo;Modifier\u0026hellip;\u0026rdquo;, puis \u0026ldquo;Nouveau\u0026rdquo;, et ajoutez le chemin vers votre dossier (ex: C:\\Hugo\\bin). Validez par OK sur toutes les fenêtres. Vous devrez peut-être redémarrer votre session ou votre machine pour que les modifications prennent effet, ou au moins redémarrer tout terminal ouvert. Installation sur Linux Sur Linux, la méthode d\u0026rsquo;installation peut varier légèrement en fonction de votre distribution. Vous pouvez utiliser un gestionnaire de paquets ou installer le binaire manuellement.\nOption 1 : Via un Gestionnaire de Paquets Debian/Ubuntu (peut ne pas être la dernière version) :\n1 2 sudo apt update sudo apt install hugo Pour obtenir une version plus récente, vous pourriez avoir besoin de télécharger le .deb depuis la page des Releases GitHub ou d\u0026rsquo;utiliser Snap.\nFedora :\n1 sudo dnf install hugo Arch Linux :\n1 sudo pacman -S hugo Snap (disponible sur de nombreuses distributions et souvent à jour) :\n1 sudo snap install hugo --channel=extended Pour mettre à jour : sudo snap refresh hugo\nOption 2 : Installation Manuelle du Binaire Visitez la page Releases de Hugo sur GitHub. Téléchargez l\u0026rsquo;archive appropriée pour votre architecture (généralement hugo_extended_X.Y.Z_linux-amd64.tar.gz). Extrayez l\u0026rsquo;archive : 1 tar -zxvf hugo_extended_0.147.3_linux-arm64.tar.gz Cela créera un fichier binaire hugo. Déplacez ce fichier dans un répertoire de votre PATH, comme /usr/local/bin : 1 sudo mv hugo /usr/local/bin/ Option Avancée : Installation depuis les Sources (Nécessite Go) Si vous souhaitez la toute dernière version de développement ou si vous avez des besoins spécifiques, vous pouvez compiler Hugo depuis les sources. Cela nécessite une installation fonctionnelle de Go (version 1.19 ou supérieure recommandée).\nInstaller Go : Suivez les instructions sur le site officiel de Go. Assurez-vous que votre GOPATH et GOROOT sont correctement configurés et que le répertoire bin de Go est dans votre PATH. Sur Linux, par exemple :\n1 2 3 4 5 6 # Télécharger et extraire Go (vérifier la dernière version) wget https://golang.org/dl/go1.22.3.linux-amd64.tar.gz sudo tar -C /usr/local -xzf go1.22.3.linux-amd64.tar.gz # Ajouter au PATH (par exemple dans ~/.bashrc ou ~/.zshrc) export PATH=$PATH:/usr/local/go/bin source ~/.bashrc # ou ~/.zshrc Cloner le dépôt Hugo :\n1 2 git clone https://github.com/gohugoio/hugo.git cd hugo Compiler Hugo :\n1 go install --tags extended Le binaire hugo sera installé dans votre répertoire $GOPATH/bin (ou $HOME/go/bin par défaut avec les versions récentes de Go).\nVérification de l\u0026rsquo;Installation Quelle que soit la méthode utilisée, vous pouvez vérifier que Hugo est correctement installé et connaître sa version en ouvrant un nouveau terminal et en tapant :\n1 hugo version Vous devriez voir quelque chose comme :\n1 2 3 4 # Forme générale # hugo v0.125.7-phk۷۷۷۷۷۷۷+extended linux/amd64 BuildDate=YYYY-MM-DDTHH:MM:SSZ VendorInfo=gohugoio # Exemple : # hugo v0.147.2+extended+withdeploy darwin/amd64 BuildDate=2025-05-06T11:18:55Z VendorInfo=brew L\u0026rsquo;important est de voir une version s\u0026rsquo;afficher et, idéalement, la mention extended si vous avez installé cette variante (recommandée pour le thème PaperMod qui peut utiliser SASS/SCSS).\nVous êtes maintenant prêt à créer votre premier site Hugo ! Dans la section suivante, nous allons initialiser un nouveau projet et y intégrer le thème PaperMod.\n","permalink":"https://sylorion.com/jcnm/posts/installation-gss-hugo-guide-complet-multiplateforme/","summary":"\u003cp\u003eMaintenant que nous avons \u003ca href=\"https://sylorion.com/jcnm/posts/publier-son-contenu-en-ligne-avec-hugo\"\u003eexploré les raisons d\u0026rsquo;utiliser un outil comme Hugo\u003c/a\u003e, passons à l\u0026rsquo;étape cruciale : son installation. Hugo est réputé pour sa simplicité d\u0026rsquo;installation. Il est distribué sous forme d\u0026rsquo;un unique fichier binaire exécutable, ce qui signifie qu\u0026rsquo;il n\u0026rsquo;y a généralement pas de dépendances complexes à gérer si vous utilisez les versions précompilées. Nous allons couvrir les méthodes d\u0026rsquo;installation les plus courantes pour MacOS, Windows et Linux, afin que vous puissiez démarrer rapidement, quel que soit votre environnement de travail.\u003c/p\u003e","title":"Installation de Hugo : Le Guide Complet Multiplateforme"},{"content":"Qu\u0026rsquo;est-ce que Hugo Les générateurs de sites statiques (GSS) représentent une approche fondamentalement différente de la création web par rapport aux systèmes de gestion de contenu (CMS) dynamiques. Au lieu d\u0026rsquo;assembler les pages à la volée lors de chaque visite, un GSS pré-compile l\u0026rsquo;intégralité du site en fichiers HTML, CSS et JavaScript statiques qui peuvent être servis directement, sans traitement serveur supplémentaire.\nCette architecture présente plusieurs avantages inhérents :speak_no_evil: :\nPerformance : Les pages statiques se chargent instantanément Sécurité : L\u0026rsquo;absence de base de données et de code exécuté dynamiquement élimine de nombreux vecteurs d\u0026rsquo;attaque Évolutivité : Des fichiers statiques peuvent être facilement mis en cache et distribués via CDN Simplicité d\u0026rsquo;hébergement : N\u0026rsquo;importe quel serveur web peut héberger ces fichiers - the best argument pour moi L\u0026rsquo;écosystème des générateurs de sites statiques Le marché des GSS s\u0026rsquo;est considérablement développé ces dernières années, chacun apportant sa philosophie et ses spécificités:\nGSS Langage Année Points forts Limitations Hugo Go 2013 Vitesse extrême, fonctionnalités natives riches Langage de template spécifique Jekyll Ruby 2008 Intégration GitHub, précurseur Lenteur sur gros sites, dépendances Ruby Gatsby JavaScript/React 2015 Écosystème React, GraphQL intégré Complexité, builds lourds Eleventy (11ty) JavaScript 2018 Flexibilité, minimalisme Moins de fonctionnalités natives Next.js JavaScript/React 2016 Hybride statique/dynamique Complexité, orienté application Astro JavaScript 2021 Multi-framework, îlots interactifs Encore jeune mais sexy Et comparée aux autres solutions non GSS Le marché des CMS plus vieux et prédominant se fait bouffer par les plate-forme No-Code.\nSolution Complexité Vitesse Maintenance Coût Sécurité Hugo Faible Très rapide Minimale Gratuit Excellente WordPress Moyenne à élevée Modérée Régulière Variable Vulnérable Wix/Squarespace Faible Modérée Faible Abonnement Bonne Développement sur mesure Très élevée Variable Élevée Élevé Variable Hugo : origines et architecture technique Créé en 2013 par Steve Francia (qui a aussi travaillé sur Docker et MongoDB) et maintenu activement par Bjørn Erik Pedersen, Hugo est né de la frustration face à la lenteur des builds de Jekyll. Le projet visait à créer un générateur de sites statiques ultra-rapide et aux fonctionnalités complètes.\nStack technique d\u0026rsquo;Hugo Langage : Écrit en Go (Golang), langage développé par Google connu pour sa rapidité et sa compilation en binaires autonomes Architecture : Compilation unique sans dépendances externes, contrairement aux solutions basées sur Node.js ou Ruby Système de templates : Utilise le moteur de templates Go avec des extensions spécifiques à Hugo Traitement de contenu : Markdown par défaut avec support de shortcodes personnalisés Pipeline de ressources : Hugo Pipes pour le traitement CSS/JS (SASS, PostCSS, minification) Système de taxonomies : Gestion native des catégories, tags et taxonomies personnalisées Internationalisation : Support multilingue intégré et performant Le choix de Go comme langage sous-jacent n\u0026rsquo;est pas anodin. Go est conçu pour la concurrence et la performance, ce qui permet à Hugo de paralléliser efficacement la génération de contenu et d\u0026rsquo;atteindre des vitesses de compilation inégalées.\nAnalyse comparative détaillée Hugo vs Jekyll Jekyll, créé par Tom Preston-Werner (cofondateur de GitHub), a longtemps été le standard des GSS :\nPerformance : Hugo génère les sites environ 30 à 100 fois plus rapidement que Jekyll Installation : Hugo est un binaire unique vs dépendances Ruby pour Jekyll Écosystème : Jekyll bénéficie de l\u0026rsquo;intégration native avec GitHub Pages Maturité : Jekyll a une plus longue histoire mais Hugo a une communauté très active Fonctionnalités natives : Hugo intègre plus de fonctionnalités sans plugins Hugo vs Gatsby Gatsby représente l\u0026rsquo;approche JavaScript/React des GSS :\nParadigme : Hugo est un générateur pur vs approche hybride React de Gatsby Expérience développeur : Hugo requiert moins de connaissances préalables Données externes : Gatsby excelle avec son layer GraphQL pour sources multiples Performances runtime : Hugo produit des sites plus légers côté client Temps de build : Hugo est significativement plus rapide Hugo vs Next.js et Nuxt.js Next.js et Nuxt.js sont des frameworks hybrides permettant le rendu statique :\nObjectif : Hugo est centré contenu vs applications web pour Next/Nuxt Complexité : Hugo est beaucoup plus simple à prendre en main Interactivité : Next/Nuxt permettent plus facilement des fonctionnalités dynamiques Polyvalence : Next/Nuxt sont plus adaptés aux applications complexes Infrastructure requise : Hugo nécessite moins de ressources pour le déploiement Hugo vs les derniers venus (11ty, Astro) Les nouveaux entrants comme 11ty ou Astro apportent de nouvelles approches :\nPhilosophie : 11ty mise sur la simplicité, Astro sur les \u0026ldquo;îlots d\u0026rsquo;interactivité\u0026rdquo; Maturité : Hugo bénéficie d\u0026rsquo;un écosystème plus établi et éprouvé Performance : Hugo reste généralement plus rapide pour la génération Flexibilité de templating : 11ty et Astro offrent plus de choix de langages de templates Contenu dense sans complexité technique? Après cette analyse comparative, Hugo se distingue par plusieurs facteurs clés et permet de produire rapidement un contenu riche et structuré sans vous perdre dans les méandres du développement web. Cette approche offre plusieurs avantages clés :\nRapidité inégalée : Les temps de build restent imbattables, ce qui est crucial lors de la mise à jour fréquente de contenu Simplicité d\u0026rsquo;installation : Un simple binaire sans dépendances complexes Fonctionnalités natives complètes : Multilinguisme, taxonomies, traitement d\u0026rsquo;images sans plugins Stabilité : Plus de 10 ans d\u0026rsquo;existence avec une philosophie cohérente Faible empreinte technique : Ne nécessite pas de maîtriser JavaScript, React ou d\u0026rsquo;autres frameworks Focus sur le contenu : Écrivez en Markdown et concentrez-vous sur la qualité de vos textes Structure cohérente : Organisation logique du contenu grâce aux taxonomies (catégories, tags) Versionnable : Tout votre site peut être mis sous contrôle de version avec Git Portable : Changez d\u0026rsquo;hébergeur facilement, votre site n\u0026rsquo;a pas de dépendances complexes Évolutif : Ajoutez du contenu sans craindre une dégradation des performances Cas d\u0026rsquo;usage idéaux pour Hugo Hugo est particulièrement adapté pour :\nSites à contenu riche nécessitant des mises à jour fréquentes Projets où la vitesse de déploiement est critique Publications multilingues avec structure complexe Environnements où l\u0026rsquo;installation de nombreuses dépendances est problématique Équipes avec des profils techniques variés Conclusion : Un choix assez arbitraire Dans l\u0026rsquo;écosystème foisonnant des GSS, Hugo se positionne comme une solution équilibrée entre puissance et simplicité. Son approche minimaliste mais complète permet de créer des sites web performants sans la complexité technique d\u0026rsquo;autres solutions.\nMais en toute honeteté le choix pour Hugo avec le thème PaperMod est suite à un tirage au sort le but est simple mettre en place un déploiement automatisé sur OVH, de contenu écrit avec markdown.\nNous verrons dans un article à venir comment configurer Hugo et intégrer une pipeline de déploiement automatisé sur OVH hebergement perso (donc pas de SSH du pure SFTP 😅).\n","permalink":"https://sylorion.com/jcnm/posts/publier-son-contenu-en-ligne-avec-hugo/","summary":"\u003ch2 id=\"quest-ce-que-hugo\"\u003eQu\u0026rsquo;est-ce que Hugo\u003c/h2\u003e\n\u003cp\u003eLes générateurs de sites statiques (GSS) représentent une approche fondamentalement différente de la création web par rapport aux systèmes de gestion de contenu (CMS) dynamiques. Au lieu d\u0026rsquo;assembler les pages à la volée lors de chaque visite, un GSS pré-compile l\u0026rsquo;intégralité du site en fichiers HTML, CSS et JavaScript statiques qui peuvent être servis directement, sans traitement serveur supplémentaire.\u003c/p\u003e\n\u003cp\u003eCette architecture présente plusieurs avantages inhérents :speak_no_evil: :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePerformance\u003c/strong\u003e : Les pages statiques se chargent instantanément\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSécurité\u003c/strong\u003e : L\u0026rsquo;absence de base de données et de code exécuté dynamiquement élimine de nombreux vecteurs d\u0026rsquo;attaque\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eÉvolutivité\u003c/strong\u003e : Des fichiers statiques peuvent être facilement mis en cache et distribués via CDN\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSimplicité d\u0026rsquo;hébergement\u003c/strong\u003e : N\u0026rsquo;importe quel serveur web peut héberger ces fichiers - \u003cem\u003ethe best argument\u003c/em\u003e pour moi\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"lécosystème-des-générateurs-de-sites-statiques\"\u003eL\u0026rsquo;écosystème des générateurs de sites statiques\u003c/h2\u003e\n\u003cp\u003eLe marché des GSS s\u0026rsquo;est considérablement développé ces dernières années, chacun apportant sa philosophie et ses spécificités:\u003c/p\u003e","title":"Rédaction de contenu en ligne avec Hugo"},{"content":"Architecte logiciel et Team Lead passionné par l\u0026rsquo;innovation technique, je navigue depuis plus d\u0026rsquo;une décennie dans l\u0026rsquo;univers du développement logiciel, des systèmes embarqués jusqu\u0026rsquo;aux architectures complexes. Mon parcours m\u0026rsquo;a conduit des laboratoires de recherche aux environnements industriels exigeants, où j\u0026rsquo;ai développé une expertise pointue dans la conception d\u0026rsquo;architectures conformes aux normes les plus strictes - notamment dans les secteurs de la défense, bancaire et énergétique.\nMon expertise Spécialiste des systèmes complexes, j\u0026rsquo;excelle dans la direction technique de projets ambitieux. Mon approche combine rigueur méthodologique et créativité, qu\u0026rsquo;il s\u0026rsquo;agisse de:\nConcevoir des architectures logicielles robustes Diriger des équipes techniques vers l\u0026rsquo;excellence Développer des systèmes embarqués critiques Optimiser les processus DevOps et d\u0026rsquo;intégration continue\nMon parcours Expert dans les langages formels et programmation, j\u0026rsquo;ai forgé mon expérience professionnelle au sein d\u0026rsquo;organisations renommées comme Safran, TotalEnergies, Nexter, Thales et plusieurs institutions financières majeures. En parallèle de mes responsabilités professionnelles, j\u0026rsquo;ai également exploré l\u0026rsquo;entrepreneuriat à travers plusieurs projets innovants, notamment dans les domaines de la communication d\u0026rsquo;urgence et du divertissement mobile avec notamment Sylorion ma structure de consulting.\nMa philosophie Je crois fermement que l\u0026rsquo;excellence technique ne suffit pas - elle doit s\u0026rsquo;accompagner d\u0026rsquo;une vision claire et d\u0026rsquo;une exécution méthodique. Chaque ligne de code, chaque décision d\u0026rsquo;architecture est guidée par la recherche constante de qualité, de sécurité et d\u0026rsquo;efficacité. Partageur de connaissances par nature, ce blog est le reflet de ma passion pour la technologie et mon engagement à contribuer à l\u0026rsquo;évolution de notre domaine.\n","permalink":"https://sylorion.com/jcnm/a-propos/","summary":"\u003cp\u003eArchitecte logiciel et Team Lead passionné par l\u0026rsquo;innovation technique, je navigue depuis plus d\u0026rsquo;une décennie dans l\u0026rsquo;univers du développement logiciel, des systèmes embarqués jusqu\u0026rsquo;aux architectures complexes.\nMon parcours m\u0026rsquo;a conduit des laboratoires de recherche aux environnements industriels exigeants, où j\u0026rsquo;ai développé une expertise pointue dans la conception d\u0026rsquo;architectures conformes aux normes les plus strictes - notamment dans les secteurs de la défense, bancaire et énergétique.\u003c/p\u003e\n\u003ch2 id=\"mon-expertise\"\u003eMon expertise\u003c/h2\u003e\n\u003cp\u003eSpécialiste des systèmes complexes, j\u0026rsquo;excelle dans la direction technique de projets ambitieux. Mon approche combine rigueur méthodologique et créativité, qu\u0026rsquo;il s\u0026rsquo;agisse de:\u003c/p\u003e","title":"A Propos"},{"content":" Chargement… ","permalink":"https://sylorion.com/jcnm/contact/","summary":"\u003ciframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdVK-hz3_OA6H0Sbl9Kt-e-P-TQ72MyhNa1R_euJaGLlz44bg/viewform?embedded=true\" width=\"640\" height=\"980\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\"\u003eChargement…\u003c/iframe\u003e","title":"Contacter"}]